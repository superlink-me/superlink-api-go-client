/*
Superlink

API for Superlink

API version: v0.1.4
Contact: support@superlink.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package superlink

import (
	"encoding/json"
	"fmt"
)

// ApiCoin the model 'ApiCoin'
type ApiCoin string

// List of api.Coin
const (
	BTC ApiCoin = "BTC"
	ETH ApiCoin = "ETH"
	XRP ApiCoin = "XRP"
)

// All allowed values of ApiCoin enum
var AllowedApiCoinEnumValues = []ApiCoin{
	"BTC",
	"ETH",
	"XRP",
}

func (v *ApiCoin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiCoin(value)
	for _, existing := range AllowedApiCoinEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiCoin", value)
}

// NewApiCoinFromValue returns a pointer to a valid ApiCoin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiCoinFromValue(v string) (*ApiCoin, error) {
	ev := ApiCoin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiCoin: valid values are %v", v, AllowedApiCoinEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiCoin) IsValid() bool {
	for _, existing := range AllowedApiCoinEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to api.Coin value
func (v ApiCoin) Ptr() *ApiCoin {
	return &v
}

type NullableApiCoin struct {
	value *ApiCoin
	isSet bool
}

func (v NullableApiCoin) Get() *ApiCoin {
	return v.value
}

func (v *NullableApiCoin) Set(val *ApiCoin) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCoin) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCoin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCoin(val *ApiCoin) *NullableApiCoin {
	return &NullableApiCoin{value: val, isSet: true}
}

func (v NullableApiCoin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCoin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

