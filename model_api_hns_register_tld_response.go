/*
Superlink

API for Superlink

API version: v0.4.1
Contact: support@superlink.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package superlink

import (
	"encoding/json"
)

// checks if the ApiHNSRegisterTLDResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHNSRegisterTLDResponse{}

// ApiHNSRegisterTLDResponse struct for ApiHNSRegisterTLDResponse
type ApiHNSRegisterTLDResponse struct {
	Records *ApiHNSBlockchainRecords `json:"records,omitempty"`
	Tld *string `json:"tld,omitempty"`
}

// NewApiHNSRegisterTLDResponse instantiates a new ApiHNSRegisterTLDResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHNSRegisterTLDResponse() *ApiHNSRegisterTLDResponse {
	this := ApiHNSRegisterTLDResponse{}
	return &this
}

// NewApiHNSRegisterTLDResponseWithDefaults instantiates a new ApiHNSRegisterTLDResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHNSRegisterTLDResponseWithDefaults() *ApiHNSRegisterTLDResponse {
	this := ApiHNSRegisterTLDResponse{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *ApiHNSRegisterTLDResponse) GetRecords() ApiHNSBlockchainRecords {
	if o == nil || IsNil(o.Records) {
		var ret ApiHNSBlockchainRecords
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiHNSRegisterTLDResponse) GetRecordsOk() (*ApiHNSBlockchainRecords, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *ApiHNSRegisterTLDResponse) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given ApiHNSBlockchainRecords and assigns it to the Records field.
func (o *ApiHNSRegisterTLDResponse) SetRecords(v ApiHNSBlockchainRecords) {
	o.Records = &v
}

// GetTld returns the Tld field value if set, zero value otherwise.
func (o *ApiHNSRegisterTLDResponse) GetTld() string {
	if o == nil || IsNil(o.Tld) {
		var ret string
		return ret
	}
	return *o.Tld
}

// GetTldOk returns a tuple with the Tld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiHNSRegisterTLDResponse) GetTldOk() (*string, bool) {
	if o == nil || IsNil(o.Tld) {
		return nil, false
	}
	return o.Tld, true
}

// HasTld returns a boolean if a field has been set.
func (o *ApiHNSRegisterTLDResponse) HasTld() bool {
	if o != nil && !IsNil(o.Tld) {
		return true
	}

	return false
}

// SetTld gets a reference to the given string and assigns it to the Tld field.
func (o *ApiHNSRegisterTLDResponse) SetTld(v string) {
	o.Tld = &v
}

func (o ApiHNSRegisterTLDResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHNSRegisterTLDResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.Tld) {
		toSerialize["tld"] = o.Tld
	}
	return toSerialize, nil
}

type NullableApiHNSRegisterTLDResponse struct {
	value *ApiHNSRegisterTLDResponse
	isSet bool
}

func (v NullableApiHNSRegisterTLDResponse) Get() *ApiHNSRegisterTLDResponse {
	return v.value
}

func (v *NullableApiHNSRegisterTLDResponse) Set(val *ApiHNSRegisterTLDResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHNSRegisterTLDResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHNSRegisterTLDResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHNSRegisterTLDResponse(val *ApiHNSRegisterTLDResponse) *NullableApiHNSRegisterTLDResponse {
	return &NullableApiHNSRegisterTLDResponse{value: val, isSet: true}
}

func (v NullableApiHNSRegisterTLDResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHNSRegisterTLDResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


