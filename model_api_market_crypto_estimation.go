/*
Superlink

API for Superlink

API version: v0.3.22
Contact: support@superlink.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package superlink

import (
	"encoding/json"
)

// checks if the ApiMarketCryptoEstimation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiMarketCryptoEstimation{}

// ApiMarketCryptoEstimation struct for ApiMarketCryptoEstimation
type ApiMarketCryptoEstimation struct {
	ExhangeRate *float32 `json:"exhangeRate,omitempty"`
	Name *string `json:"name,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewApiMarketCryptoEstimation instantiates a new ApiMarketCryptoEstimation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiMarketCryptoEstimation() *ApiMarketCryptoEstimation {
	this := ApiMarketCryptoEstimation{}
	return &this
}

// NewApiMarketCryptoEstimationWithDefaults instantiates a new ApiMarketCryptoEstimation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiMarketCryptoEstimationWithDefaults() *ApiMarketCryptoEstimation {
	this := ApiMarketCryptoEstimation{}
	return &this
}

// GetExhangeRate returns the ExhangeRate field value if set, zero value otherwise.
func (o *ApiMarketCryptoEstimation) GetExhangeRate() float32 {
	if o == nil || IsNil(o.ExhangeRate) {
		var ret float32
		return ret
	}
	return *o.ExhangeRate
}

// GetExhangeRateOk returns a tuple with the ExhangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMarketCryptoEstimation) GetExhangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExhangeRate) {
		return nil, false
	}
	return o.ExhangeRate, true
}

// HasExhangeRate returns a boolean if a field has been set.
func (o *ApiMarketCryptoEstimation) HasExhangeRate() bool {
	if o != nil && !IsNil(o.ExhangeRate) {
		return true
	}

	return false
}

// SetExhangeRate gets a reference to the given float32 and assigns it to the ExhangeRate field.
func (o *ApiMarketCryptoEstimation) SetExhangeRate(v float32) {
	o.ExhangeRate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiMarketCryptoEstimation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMarketCryptoEstimation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiMarketCryptoEstimation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiMarketCryptoEstimation) SetName(v string) {
	o.Name = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ApiMarketCryptoEstimation) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMarketCryptoEstimation) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ApiMarketCryptoEstimation) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ApiMarketCryptoEstimation) SetSymbol(v string) {
	o.Symbol = &v
}

func (o ApiMarketCryptoEstimation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiMarketCryptoEstimation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExhangeRate) {
		toSerialize["exhangeRate"] = o.ExhangeRate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableApiMarketCryptoEstimation struct {
	value *ApiMarketCryptoEstimation
	isSet bool
}

func (v NullableApiMarketCryptoEstimation) Get() *ApiMarketCryptoEstimation {
	return v.value
}

func (v *NullableApiMarketCryptoEstimation) Set(val *ApiMarketCryptoEstimation) {
	v.value = val
	v.isSet = true
}

func (v NullableApiMarketCryptoEstimation) IsSet() bool {
	return v.isSet
}

func (v *NullableApiMarketCryptoEstimation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiMarketCryptoEstimation(val *ApiMarketCryptoEstimation) *NullableApiMarketCryptoEstimation {
	return &NullableApiMarketCryptoEstimation{value: val, isSet: true}
}

func (v NullableApiMarketCryptoEstimation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiMarketCryptoEstimation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


