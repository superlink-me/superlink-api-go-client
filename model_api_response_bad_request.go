/*
Superlink

API for Superlink

API version: 1.0
Contact: support@superlink.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Superlink

import (
	"encoding/json"
)

// checks if the ApiResponseBadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiResponseBadRequest{}

// ApiResponseBadRequest struct for ApiResponseBadRequest
type ApiResponseBadRequest struct {
	Errors []ApiResponseError `json:"errors,omitempty"`
}

// NewApiResponseBadRequest instantiates a new ApiResponseBadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiResponseBadRequest() *ApiResponseBadRequest {
	this := ApiResponseBadRequest{}
	return &this
}

// NewApiResponseBadRequestWithDefaults instantiates a new ApiResponseBadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiResponseBadRequestWithDefaults() *ApiResponseBadRequest {
	this := ApiResponseBadRequest{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ApiResponseBadRequest) GetErrors() []ApiResponseError {
	if o == nil || IsNil(o.Errors) {
		var ret []ApiResponseError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiResponseBadRequest) GetErrorsOk() ([]ApiResponseError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ApiResponseBadRequest) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ApiResponseError and assigns it to the Errors field.
func (o *ApiResponseBadRequest) SetErrors(v []ApiResponseError) {
	o.Errors = v
}

func (o ApiResponseBadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiResponseBadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableApiResponseBadRequest struct {
	value *ApiResponseBadRequest
	isSet bool
}

func (v NullableApiResponseBadRequest) Get() *ApiResponseBadRequest {
	return v.value
}

func (v *NullableApiResponseBadRequest) Set(val *ApiResponseBadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiResponseBadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiResponseBadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiResponseBadRequest(val *ApiResponseBadRequest) *NullableApiResponseBadRequest {
	return &NullableApiResponseBadRequest{value: val, isSet: true}
}

func (v NullableApiResponseBadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiResponseBadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


