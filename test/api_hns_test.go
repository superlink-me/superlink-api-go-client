/*
Superlink

Testing HnsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package superlink

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/superlink-me/superlink-api-go-client"
)

func Test_superlink_HnsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HnsAPIService HnsDomainAvailable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tld string
		var sld string

		resp, httpRes, err := apiClient.HnsAPI.HnsDomainAvailable(context.Background(), tld, sld).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HnsAPIService HnsDomainCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tld string

		resp, httpRes, err := apiClient.HnsAPI.HnsDomainCreate(context.Background(), tld).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HnsAPIService HnsDomainCreateSig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tld string

		resp, httpRes, err := apiClient.HnsAPI.HnsDomainCreateSig(context.Background(), tld).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HnsAPIService HnsDomainDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tld string
		var sld string

		httpRes, err := apiClient.HnsAPI.HnsDomainDelete(context.Background(), tld, sld).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HnsAPIService HnsTldCheckClaimed", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tld string
		var address string

		httpRes, err := apiClient.HnsAPI.HnsTldCheckClaimed(context.Background(), tld, address).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HnsAPIService HnsTldValidate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tld string

		resp, httpRes, err := apiClient.HnsAPI.HnsTldValidate(context.Background(), tld).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
